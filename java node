package graph;
import java.awt.Color;
import java.awt.Graphics;
import java.util.Vector;


public class Node implements java.io.Serializable
{
	String name;
	int locx = 0;
	int locy = 0;
	int width = 30;
	int height = 30;
	Color current = Color.RED;
	Vector<Line> lines = new Vector<Line>();
	public Node(int INX, int INY, String IN)
	{
		super();
		locx = INX;
		locy = INY;
		width = 30;
		height = 30;
		name = IN;
	}
	public void setLocation(int XIN, int YIN)
	{
		locx = XIN;
		locy = YIN;
	}
	public int getX()
	{
		return locx;
	}
	public int getY()
	{
		return locy;
	}
	public void addLine(Line IN)
	{
		lines.addElement(IN);
	}
	public void paintMe(Graphics G)
	{
		G.setColor(current);
		//System.out.println(locx + locy + width + height);
		G.drawOval(locx, locy, width, height);
		G.drawString(name, locx, locy);;
	}
	public void setColor(Color IN)
	{
		current = IN;
	}
	public Line getConnect(Node IN)
	{
		for(int x = 0; x < lines.size(); x++)
		{
			if(lines.elementAt(x).getP1().equals(IN) || lines.elementAt(x).getP2().equals(IN))
			{
				Line temp = lines.elementAt(x);
				return temp;
			}
		}
		return null;
	}
	public String getName()
	{
		return name;
	}
	public void removeAll()
	{
		for(int x = 0; x < lines.size(); x++)
		{
				if(lines.elementAt(x).getP1().equals(this))
				{
					lines.elementAt(x).getP2().deleteLine(lines.elementAt(x));
				}
				else
				{
					lines.elementAt(x).getP1().deleteLine(lines.elementAt(x));
				}
				lines.removeElementAt(x);
		}
	}
	public void deleteLine(Line IN)
	{
		for(int x = 0; x < lines.size(); x++)
		{
			lines.removeElementAt(x);
		}
	}
}
